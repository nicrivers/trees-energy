} else {
new_sample[[new_var_name]] = new_sample$tree_summer * new_sample[[v]] * new_sample[[w]]
}
}
}
#remove the dots in the name of demeaned variables
# Same model matrix as above, but without dots
model.matrix.saving <- model.matrix(formula(paste(gsub("_dot","",model.matrix.train.formula), collapse=" ")) , new_sample)
# Predictions (temperature is the only variable that changes over time)
new_sample$tree_saving_predicted = predict(lasso.elec, model.matrix.saving) %>% as.numeric()
# This is in log points. Convert to percent using (exp(log_saving)-1)
new_sample$tree_saving_predicted <- exp(new_sample$tree_saving_predicted) - 1
temp <-new_sample %>%
group_by(temp) %>%
summarise(tree_saving_predicted=mean(tree_saving_predicted)) %>%
ggplot(aes(x=temp, y=tree_saving_predicted)) +
geom_line(colour="red") +
journal_theme() +
scale_y_continuous(name="Predicted Electericty Savings", labels=scales::percent_format()) +
labs(x="Teperature (Â°C)")
temp
#add the density plot to temp plot
# Density plot of Temperature
hist_plot_temp <- ggplot(pred_12.5 %>% filter(temp>=0), aes(x = temp)) +
geom_density(bins = 30,fill = "gray", color = "black", alpha = 0.4) +
journal_theme() +
labs(x = NULL, y = "Temperature Distribution")
#add the density plot to temp plot
# Density plot of Temperature
dens_plot_temp <- ggplot(pred_12.5 %>% filter(temp>=0), aes(x = temp)) +
geom_density(bins = 30,fill = "gray", color = "black", alpha = 0.4) +
journal_theme() +
labs(x = NULL, y = "Temperature Distribution")
# Arrange plots: Place density plot above the main plot
combined_plot_temp <- ggarrange(
dens_plot_temp, temp,
ncol = 1, nrow = 2, align = "v", heights = c(1, 2)  # Histogram smaller than main plot
)
# Arrange plots: Place density plot above the main plot
combined_plot_temp <- ggarrange(
dens_plot_temp, temp,
ncol = 1, nrow = 2, align = "v", heights = c(1, 2)  # Histogram smaller than main plot
)
combined_plot_temp
#create the prediction sample in which all variables except for humidity are constant at thier mean
new_sample_hum <- pred_12.5 %>%
# keep in-leaf period only
filter(summer == 1) %>%
# remove temperature variable
select(-rel_hum) %>%
summarise(across(everything(), mean)) %>%
expand_grid(rel_hum = 10:100) %>%
mutate(tree_summer = tree_percent * summer)
for (i in 1:nrow(all_combinations)) {
w = all_combinations[i,1]
v = all_combinations[i,2]
print(paste("Done",i,"out of",length(vars)^2-length(vars)))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
new_sample_hum[[new_var_name]] = new_sample_hum$tree_summer * new_sample_hum[[w]]
} else {
new_sample_hum[[new_var_name]] = new_sample_hum$tree_summer * new_sample_hum[[v]] * new_sample_hum[[w]]
}
}
# # Create all other variables
counter <- 0
#
for (v in vars) {
for (w in vars[-length(vars)]) { # I don't need to include linear terms twice
counter = counter + 1
print(paste("Done",counter,"out of",length(vars)^2-length(vars),"with size",object.size(new_sample_hum)/1e9,"GB"))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
new_sample_hum[[new_var_name]] = new_sample_hum$tree_summer * new_sample_hum[[w]]
} else {
new_sample_hum[[new_var_name]] = new_sample_hum$tree_summer * new_sample_hum[[v]] * new_sample_hum[[w]]
}
}
}
#remove the dots in the name of demeaned variables
# Same model matrix as above, but without dots
model.matrix.saving <- model.matrix(formula(paste(gsub("_dot","",model.matrix.train.formula), collapse=" ")) , new_sample_hum)
# Predictions (Humidity is the only variable that changes over time)
new_sample_hum$tree_saving_predicted = predict(lasso.elec, model.matrix.saving) %>% as.numeric()
# This is in log points. Convert to percent using (exp(log_saving)-1)
new_sample_hum$tree_saving_predicted <- exp(new_sample_hum$tree_saving_predicted) - 1
hum <-new_sample_hum %>%
group_by(rel_hum) %>%
summarise(tree_saving_predicted=mean(tree_saving_predicted)) %>%
ggplot(aes(x=rel_hum, y=tree_saving_predicted)) +
geom_line(colour="red") +
journal_theme() +
scale_y_continuous(name="Predicted Electericty Savings", labels=scales::percent_format())+
labs(x="Relative Humidity (%)")
#add the density plot to humidity plot
# Density plot of  of humidity
dens_plot_hum <- ggplot(pred_12.5, aes(x = rel_hum)) +
geom_density(bins=30,fill = "gray", color = "black", alpha = 0.4) +
journal_theme() +
labs(x = NULL, y = "Relative Humidity Distribution")
# Arrange plots: Place histogram above the main plot
combined_plot_hum <- ggarrange(
dens_plot_hum, hum,
ncol = 1, nrow = 2, align = "v", heights = c(1, 2)
)
combined_plot_hum
#create the prediction sample in which all variables except for wind are constant at their mean
new_sample_wind <- pred_12.5 %>%
# keep in-leaf period only
filter(summer == 1) %>%
# remove temperature variable
select(-wind_spd) %>%
summarise(across(everything(), mean)) %>%
expand_grid(wind_spd = 0:60) %>%
mutate(tree_summer = tree_percent * summer)
for (i in 1:nrow(all_combinations)) {
w = all_combinations[i,1]
v = all_combinations[i,2]
print(paste("Done",i,"out of",length(vars)^2-length(vars)))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
new_sample_wind[[new_var_name]] = new_sample_wind$tree_summer * new_sample_wind[[w]]
} else {
new_sample_wind[[new_var_name]] = new_sample_wind$tree_summer * new_sample_wind[[v]] * new_sample_wind[[w]]
}
}
# # Create all other variables
counter <- 0
#
for (v in vars) {
for (w in vars[-length(vars)]) { # I don't need to include linear terms twice
counter = counter + 1
print(paste("Done",counter,"out of",length(vars)^2-length(vars),"with size",object.size(new_sample_wind)/1e9,"GB"))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
new_sample_wind[[new_var_name]] = new_sample_wind$tree_summer * new_sample_wind[[w]]
} else {
new_sample_wind[[new_var_name]] = new_sample_wind$tree_summer * new_sample_wind[[v]] * new_sample_wind[[w]]
}
}
}
#remove the dots in the name of demeaned variables
# Same model matrix as above, but without dots
model.matrix.saving <- model.matrix(formula(paste(gsub("_dot","",model.matrix.train.formula), collapse=" ")) , new_sample_wind)
# Predictions (wind is the only variable that changes over time)
new_sample_wind$tree_saving_predicted = predict(lasso.elec, model.matrix.saving) %>% as.numeric()
# This is in log points. Convert to percent using (exp(log_saving)-1)
new_sample_wind$tree_saving_predicted <- exp(new_sample_wind$tree_saving_predicted) - 1
wind <-new_sample_wind %>%
group_by(wind_spd) %>%
summarise(tree_saving_predicted=mean(tree_saving_predicted)) %>%
ggplot(aes(x=wind_spd, y=tree_saving_predicted)) +
geom_line(colour="red") +
journal_theme() +
scale_y_continuous(name="Predicted Electericty Savings", labels=scales::percent_format()) +
labs(x="Wind Speed (km/h)")
dens_plot_wind<- ggplot(pred_12.5, aes(x = wind_spd)) +
geom_density(bins=30,fill = "gray", color = "black", alpha = 0.4) +
journal_theme() +
labs(x = NULL, y = "Wind Speed Distribution")  # Remove x label for cleaner alignment
# Arrange plots: Place density above the main plot
combined_plot_wind <- ggarrange(
dens_plot_wind, wind,
ncol = 1, nrow = 2, align = "v", heights = c(1, 2)  # Histogram smaller than main plot
)
#plot all weather variables together
ggarrange(temp,
hum,wind,
labels = c("A","B","C"),
nrow = 3,ncol = 1)
#plot all weather variables together
ggarrange(combined_plot_temp,
combined_plot_hum,combined_plot_wind,
labels = c("A","B","C"),
nrow = 3,ncol = 1)
ggsave("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/figures_tables_output/tree-weather-interaction.jpg",width = 35,height = 32,units = c("cm"),dpi=300)
#plot all weather variables together
ggarrange(combined_plot_temp,
combined_plot_hum,combined_plot_wind,
labels = c("A","B","C"),
nrow = 1,ncol = 3)
ggsave("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/figures_tables_output/tree-weather-interaction.jpg",width = 35,height = 32,units = c("cm"),dpi=300)
#Comparison of savings from current UTC and adjusted UTC
########################################################
#clear all data frames from environment
rm(list = ls())
#read only the required data sets
pred_12.5 <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/predic_sample.csv")
prediction_sample_lasso <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/Lasso-prediction.csv")
#Annual average savings from current canopy
avr_saving_current <- prediction_sample_lasso %>% group_by(time) %>%
summarise(avr_saving=mean(tree_saving_predicted)) %>%
mutate(scenario=c("Current UTC"))
# Predicted savings from adjusted tree canopy
prediction_sample_adj <- pred_12.5 %>%
mutate(
# Calculate the needed amount to reach canopy of 1
needed_tree = 1 - tree_percent,
# Calculate a quarter of this amount
add_tree = needed_tree * 0.25,
# Add this quarter amount to the existing tree canopy
tree_percent = pmin(tree_percent + add_tree, 1)) %>%
mutate(tree_summer = tree_percent * summer)
#################################################################################
# This is all combinations of variables                                         #
combinations_no_repetition <- t(combn(vars, 2))                                 #
#################################################################################
# This is all combinations of variables                                         #
combinations_no_repetition <- t(combn(vars, 2))                                 #
#Comparison of savings from current UTC and adjusted UTC
########################################################
#clear all data frames from environment
rm(list = ls())
# Prediction sample
pred_12.5 <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/Semester 5/summer 2024/tree project/new created datasets-jan 2025/predic_sample.csv")
# Trained LASSO model
lasso.elec <- readRDS("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/Semester 5/summer 2024/tree project/Lasso_data_nic_new_version/final_lasso_model.rds")
# LASSO model formula
model.matrix.train.formula <- readRDS("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/Semester 5/summer 2024/tree project/Lasso_data_nic_new_version/model_matrix_train_formula.rds")
# Weather variables
# These need to be exactly the same as in estimate_lasso_final.R
vars <- c("cdd", "hdd", "rel_hum", "wind_spd", "elevation", "weekend", "daylight", "cos_az", "sin_az", "1")
# Predicted savings from adjusted tree canopy
prediction_sample_adj <- pred_12.5 %>%
mutate(
# Calculate the needed amount to reach canopy of 1
needed_tree = 1 - tree_percent,
# Calculate a quarter of this amount
add_tree = needed_tree * 0.25,
# Add this quarter amount to the existing tree canopy
tree_percent = pmin(tree_percent + add_tree, 1)) %>%
mutate(tree_summer = tree_percent * summer)
#################################################################################
# This is all combinations of variables                                         #
combinations_no_repetition <- t(combn(vars, 2))                                 #
# Generate combinations with repetition                                         #
repeated_combinations <- t(sapply(vars[-length(vars)], function(x) c(x, x)))    #
rownames(repeated_combinations) <- NULL
# Combine both sets of combinations                                             #
all_combinations <- rbind(combinations_no_repetition, repeated_combinations)    #
# This generates the model matrices (data)
for (i in 1:nrow(all_combinations)) {
w = all_combinations[i,1]
v = all_combinations[i,2]
print(paste("Done",i,"out of",nrow(all_combinations),"with size",object.size(prediction_sample_adj)/1e9,"GB"))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
prediction_sample_adj[[new_var_name]] = prediction_sample_adj$tree_summer * prediction_sample_adj[[w]]
} else {
prediction_sample_adj[[new_var_name]] = prediction_sample_adj$tree_summer * prediction_sample_adj[[v]] * prediction_sample_adj[[w]]
}
}
# # Create all other variables
counter <- 0
for (v in vars) {
for (w in vars[-length(vars)]) { # I don't need to include linear terms twice
counter = counter + 1
print(paste("Done",counter,"out of",length(vars)^2-length(vars),"with size",object.size(prediction_sample_adj)/1e9,"GB"))
flush.console()
new_var_name <- paste("tree_summer",v,w,sep="_")
if (v == "1") {
prediction_sample_adj[[new_var_name]] = prediction_sample_adj$tree_summer * prediction_sample_adj[[w]]
} else {
prediction_sample_adj[[new_var_name]] = prediction_sample_adj$tree_summer * prediction_sample_adj[[v]] * prediction_sample_adj[[w]]
}
}
}
# Rename the coefficients in LASSO model to remove dots
row.names(lasso.elec$beta) = gsub("_dot","", x=row.names(lasso.elec$beta))
# Same model matrix as above, but without dots
model.matrix.saving <- model.matrix(formula(paste(gsub("_dot","",model.matrix.train.formula), collapse=" ")) , prediction_sample_adj)
# Predictions
prediction_sample_adj$tree_saving_predicted = predict(lasso.elec, model.matrix.saving) %>% as.numeric()
# This is in log points. Convert to percent using (exp(log_saving)-1)
prediction_sample_adj$tree_saving_predicted <- exp(prediction_sample_adj$tree_saving_predicted) - 1
prediction_sample_adj <- prediction_sample_adj %>% select(-needed_tree,-add_tree,-X)
View(prediction_sample_adj)
prediction_sample_adj <- prediction_sample_adj %>% select(-needed_tree,-add_tree,-X)
prediction_sample_adj <- prediction_sample_adj %>% select(-needed_tree,-add_tree)
#save the predicted savings from the adjusted tree canopy
write.csv(prediction_sample_adj,file = "/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/predicted_adj.csv")
#Annual average savings from current canopy
avr_saving_current <- prediction_sample_lasso %>% group_by(time) %>%
summarise(avr_saving=mean(tree_saving_predicted)) %>%
mutate(scenario=c("Current UTC"))
prediction_sample_lasso <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/Lasso-prediction.csv")
#Annual average savings from current canopy
avr_saving_current <- prediction_sample_lasso %>% group_by(time) %>%
summarise(avr_saving=mean(tree_saving_predicted)) %>%
mutate(scenario=c("Current UTC"))
#annual average savings from adjusted canopy
avr_saving_adj <- prediction_sample_adj %>% group_by(time) %>%
summarise(avr_saving=mean(tree_saving_predicted)) %>%
mutate(scenario=c("Adjusted UTC"))
#Join the two scenarios
avr_save_current_adj <- bind_rows(avr_saving_current, avr_saving_adj)
#define the levels
avr_save_current_adj <- avr_save_current_adj %>%
mutate(
scenario = factor(scenario, levels = c("Current UTC", "Adjusted UTC")),  # Ensure order
scenario_order = factor(scenario, levels = c("Current UTC", "Adjusted UTC"), labels = c("1", "2"))  # Numeric labels
)
scenario_labels <- c("1" = "Current UTC", "2" = "Adjusted UTC")  # Define custom labels
#dashed line indicating the average annual predicted savings from each scenario
thresholds <- tibble::tibble(
scenario_order = factor(c("1", "2"), levels = c("1", "2")),  # Match factor labels
yintercept = c(-0.029, -0.050)  # Keep original threshold values
)
scenario_labels <- c("1" = "Current UTC", "2" = "Adjusted UTC")  # Labels for facet strips
ggplot(data = avr_save_current_adj, aes(x = time, y = avr_saving, color = scenario)) +
geom_line() +
geom_hline(data = thresholds, aes(yintercept = yintercept),
color = "black", linetype = "dashed", size = 0.7) +
facet_wrap(~ scenario_order, labeller = labeller(scenario_order = scenario_labels)) +  # Use updated facet labels
scale_y_continuous(name = "Average Predicted Electricity Savings", labels = percent_format()) +
scale_x_datetime(
name = "Time",
date_labels = "%b",
date_breaks = "2 month"
) +
scale_color_manual(
name = "Scenarios",
values = c("Current UTC" = "red", "Adjusted UTC" = "steelblue")
) +
labs(x = "Time") +
journal_theme() +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
strip.text = element_text(size = 12, face = "bold")  # Adjust facet strip labels
)
journal_theme <- function(base_size = 12, base_family = "Arial") {
theme_minimal(base_size = base_size, base_family = base_family) +
theme(
text = element_text(color = "black", size = base_size, family = base_family),
axis.title = element_text(face = "bold", color = "black"),
axis.text = element_text(color = "black"),
legend.title = element_text(face = "bold"),
legend.position = "right",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background = element_rect(fill = "white", colour = NA),
axis.ticks = element_line(color = "black"),  # Ensure tick marks are visible
axis.ticks.length = unit(0.2, "cm"),  # Length of the tick marks
axis.line = element_line(color = "black")  # Ensure axis lines are visible
)
}
ggplot(data = avr_save_current_adj, aes(x = time, y = avr_saving, color = scenario)) +
geom_line() +
geom_hline(data = thresholds, aes(yintercept = yintercept),
color = "black", linetype = "dashed", size = 0.7) +
facet_wrap(~ scenario_order, labeller = labeller(scenario_order = scenario_labels)) +  # Use updated facet labels
scale_y_continuous(name = "Average Predicted Electricity Savings", labels = percent_format()) +
scale_x_datetime(
name = "Time",
date_labels = "%b",
date_breaks = "2 month"
) +
scale_color_manual(
name = "Scenarios",
values = c("Current UTC" = "red", "Adjusted UTC" = "steelblue")
) +
labs(x = "Time") +
journal_theme() +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
strip.text = element_text(size = 12, face = "bold")  # Adjust facet strip labels
)
ggsave("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/figures_tables_output/adj-current-scenario.jpg",width = 20,height = 16,units = c("cm"),dpi=300)
#Regression Models
###############################################################################
#clear all data frames from environment
rm(list = ls())
est_sample <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/estimation_sample.csv")
buffer_est <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/estimation_buffer_sqm.csv")
direction_est <- read_csv("/Users/Tima/Library/CloudStorage/OneDrive-UniversityofOttawa/phd/semester 6/winter 2025/tree project/Tree canopy and energy/intermediate_data/estimation_direction.csv")
#Regression models for tree canopy measures within 12.5 meter buffer
#Base regression with address and time Fixed effects
formula1 <- log(elec)~ tree_percent*summer|FULLADDR+time
model1 <- feols(formula1, data = est_sample,cluster = ~ FULLADDR + time)
#Regression models with higher resolution Fixed Effects
#house by hour Fixed Effect
formula2 <- log(elec)~ tree_percent *summer|FULLADDR^hour + time
model2 <- feols(formula2, data = est_sample, cluster = ~ FULLADDR + time)
#house by weekday Fixed Effects
formula3 <- log(elec)~ tree_percent *summer|FULLADDR^weekend + time
model3 <- feols(formula3, data = est_sample,cluster = ~ FULLADDR + time)
#time by street index Fixed Effects
formula4 <- log(elec)~ tree_percent *summer|FULLADDR + time^street_index
model4 <- feols(formula4, data = est_sample,cluster = ~ FULLADDR + time)
#house by weekday and hour Fixed Effects
formula5 <- log(elec)~ tree_percent *summer|FULLADDR^weekend+FULLADDR^hour+ time
model5 <- feols(formula5, data = est_sample,cluster = ~ FULLADDR + time)
getwd()
treedat1 <- read_csv("../raw_data/data_FINAL_2022_12_19.csv")
getwd()
treedat1 <- read_csv("../raw_data/data_FINAL_2022_12_19.csv")
getwd()
treedat1 <- read_csv("../raw_data/data_FINAL_2022_12_19.csv")
library(tidyverse)
library(sf)
library(weathercan)
library(suntools)
library(car)
library(glmnet)
library(xgboost)
library(caret)
library(mlr)
library(lubridate)
library(fixest)
library(modelsummary)
library(scales)
library(ggpubr)
library(cowplot)
library(forcats)
library(here)
treedat1 <- read_csv("../raw_data/data_FINAL_2022_12_19.csv")
treedat2 <- read_csv("../raw_data/data_random_tree.csv")
write.csv(treedat1, "../intermediate_data/jambo.csv")
est_sample <- read_csv("../intermediate_data/estimation_sample.csv")
#Regression models for tree canopy measures within 12.5 meter buffer
#Base regression with address and time Fixed effects
formula1 <- log(elec)~ tree_percent*summer|FULLADDR+time
model1 <- feols(formula1, data = est_sample,cluster = ~ FULLADDR + time)
results_df <- modelsummary(
list("Model 1" = model1),
stars = c('*' = .1, '**' = .05, '***' = .01),output = "data.frame")
View(results_df)
write.csv(results_df, "../intermediate_data/regression_results.csv", row.names = FALSE)
rm(list)ls
rm(est_sample)
rm(model1)
rm(results_df)
rm(treedat1)
rm(treedat2)
#read only the required data sets
dat <- read_csv("../intermediate_data/dat.csv")
est_12.5 <- read_csv("../intermediate_data/estimation_sample.csv")
pred_12.5 <- read_csv("../intermediate_data/predic_sample.csv")
#Uni variate Statistics
calculate_stats <- function(dat, continuous_vars, binary_vars) {
continuous_stats <- dat %>%
summarise(across(all_of(continuous_vars), list(
mean = ~mean(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
min = ~min(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
binary_stats <- dat %>%
summarise(across(all_of(binary_vars), list(
count_0 = ~sum(. == 0, na.rm = TRUE),
count_1 = ~sum(. == 1, na.rm = TRUE),
#how frequently 1 appears compared to 0
proportion_1 = ~mean(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
combined_stats <- bind_rows(Continuous = continuous_stats, Binary = binary_stats)
combined_stats
}
continuous_vars <- c("elec", "tree_percent", "rel_hum", "temp", "wind_spd", "azimuth", "elevation", "hdd", "cdd")
binary_vars <- c("weekend", "summer","daylight")
stat <- calculate_stats(dat, continuous_vars, binary_vars)
View(stat)
write.csv(stat,file = "../intermediate_data/uni-stat.csv")
View(stat)
#Uni variate Statistics: estimation sample
calculate_stats <- function(data, continuous_vars, binary_vars) {
continuous_stats <- data %>%
summarise(across(all_of(continuous_vars), list(
mean = ~mean(., na.rm = TRUE),
max = ~max(., na.rm = TRUE),
min = ~min(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
binary_stats <- data %>%
summarise(across(all_of(binary_vars), list(
count_0 = ~sum(. == 0, na.rm = TRUE),
count_1 = ~sum(. == 1, na.rm = TRUE),
#how frequently 1 appears compared to 0
proportion_1 = ~mean(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
combined_stats <- bind_rows(Continuous = continuous_stats, Binary = binary_stats)
combined_stats
}
continuous_vars <- c("elec", "tree_percent", "rel_hum", "temp", "wind_spd", "azimuth", "elevation", "hdd", "cdd")
binary_vars <- c("weekend", "summer","daylight")
stat_est <- calculate_stats(est_12.5, continuous_vars, binary_vars)
View(stat_est)
#uniform plot theme
journal_theme <- function(base_size = 12, base_family = "Arial") {
theme_minimal(base_size = base_size, base_family = base_family) +
theme(
text = element_text(color = "black", size = base_size, family = base_family),
axis.title = element_text(face = "bold", color = "black"),
axis.text = element_text(color = "black"),
legend.title = element_text(face = "bold"),
legend.position = "right",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = NA),
plot.background = element_rect(fill = "white", colour = NA),
axis.ticks = element_line(color = "black"),  # Ensure tick marks are visible
axis.ticks.length = unit(0.2, "cm"),  # Length of the tick marks
axis.line = element_line(color = "black")  # Ensure axis lines are visible
)
}
#read the Lasso predicted data
prediction_sample_lasso <- read_csv("../intermediate_data/Lasso-prediction.csv")
